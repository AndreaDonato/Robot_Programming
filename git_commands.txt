Nella cartella in cui voglio lavorare

	git init

crea una cartella nascosta .git (si vede con ls -a) con le configurazioni di default.
Non esiste ancora il master branch, che viene creato dal primo commit.
Se ci sono file nella cartella, li aggiungo alla coda di commit:

	git add .			# Per svuotare la coda di commit se sbaglio a usare add uso {git reset}

e finalmente li carico sul neonato master branch

	git commit -m "first commit"

che chiamo subito main perché master sa di schiavismo:

	git branch -m master main

Se va tutto bene controllo il branch creato con

	git branch -v			# Posso omettere verbose ovviamente

A questo punto aggiorno i file nella cartella, e ogni volta che sono soddisfatto

	git add .
	git commit -m "descrizione del commit"

Se voglio escludere alcuni tipi di file dal brutale git add . (che di suo aggiunge alla repo tutta
la cartella) mi serve un file .gitignore. Se ad esempio voglio ignorare tutti i file senza
estensione (generalmente gli eseguibili) dovrò scrivere

	*			# Ignora tutto
	!*/			# tranne le cartelle
	!*.*		# e i file con estensione
	!Makefile	# magari tranne i Makefile, quelli servono

Se faccio git status visualizzo

	- Branch che sto attualmente utilizzando;
	- File modificati ma non ancora committati;
	- File presenti nella directory di lavoro ma non ancora tracciati da Git;
	- File messi in coda dal comando add, ovvero in attesa di un commit;
	- Altri messaggi informativi.

Se voglio vedere i file attualmente salvati nella repo uso

	git ls-files

Ora voglio creare un altro branch:

	git branch CtoC++		# Voglio riscrivere in C++ dei programmi originariamente in C, quindi
							# lo chiamo CtoC++
	git branch -v			# Mi rendo conto che il nuovo branch è una copia di quello di partenza
	git checkout CtoC++		# Mi sposto nel nuovo branch
	git ls-files			# E infatti ci trovo gli stessi files di quello di partenza

Ipotizziamo che ora creo altri file in main e voglio metterli anche in CtoC++. A partire dal
branch che voglio aggiornare (CtoC++) uso

	git merge main

Ora il branch CtoC++ ha tutte le versioni più aggiornate di tutti i file di main (oltre ai suoi).

Se dovessi creare per sbaglio un branch puoi rimuoverlo con

	git branch -d nome-del-branch

-d è una rimozione sicura, che si accerta che non ti stia perdendo dei file, -D è quella brutale.

Se vuoi cancellare dei file dalla repo 


	git rm --cached file_da_eliminare.txt				# Se tolgo --cached lo elimina anche dalla
														# directory di lavoro
	git commit -m "Rimosso file_da_eliminare.txt"		# Altrimenti la modifica non è effettiva

Per scaricare dalla repo un singolo file

	git show nome-del-branch:path/file.ext > file_nella_directory


REPO REMOTA
Creo la repo su GitHub (o analoghi). Sul branch che voglio collegare

	git remote add origin <URL_GitHub>

dove origin è una specie di alias usato al posto dell'URL. Meglio usare l'URL SSH

	git@github.com:AndreaDonato/testing.git 		(per esempio)

perché così in fase di push/pull non chiede ogni volta le credenziali GitHub.
Per fare ciò però serve una chiave SSH.

	ssh-keygen -t ed25519 -C "tua_email"

La parte finale è solo un commento da accompagnare alla chiave. Questo genera una coppia di chiavi
pubblica/privata. Ora bisogna copiare la chiave pubblica

	cat ~/.ssh/id_ed25519.pub 		(+ copia a mano da terminale)

oppure 

	xclip -sel clip < ~/.ssh/<nome_chiave>.pub  	(Questo copia anche il commento "tua_email")

Si incolla in GitHub > Settings > SSH e il gioco è fatto.
La prima volta che si connette farà storie sull'autenticità della connessione. Se uno vuole essere
zelante si va a confrontare il key_fingerprint ottenuto dal sito con quello ufficiale (ti dà anche
la possibilità di incollarlo e confrontarlo). Basta dire 'yes'.

A questo punto posso pushare le modifiche in locale

	git add .
	git commit

nella repo remota 

	git push -u origin main

dove -u setta la coppia di push predefinita (per i push successivi basta scrivere git push, lui sa
in automatico che deve farlo su origin da main). Se voglio posso specificare una coppia diversa con

	git push origin2 main2 			# Posto che origin2 e main2 esistano

Per il pull invece tocca decidere cosa fare. Si compone di due comandi:

	- fetch: scarica le modifiche tra i branch locale e remoto (ma non le salva nella repo locale);

	- Il modo in cui le salva può essere

		- --no-rebase, ovvero un merge: nella repo locale troverò tutte le versioni più aggiornate
			dei file presenti nella repo remota, oltre a quelli che c'erano già. Per settarlo di
			default, git config pull.rebase false;

		- --rebase, ovvero come un merge ma piuttosto che unire due rami in un commit di merge*
			aggiunge le modifiche locali in fondo alle modifiche in remoto (la differenza si pone
			se mentre A fa modifiche in remoto B ne ha già committate altre). Per settarlo di
			default, git config pull.rebase true;

			*per commit si intende un nodo dell'albero della cronologia modifiche. Il commit (nodo)
				merge di n branch ha n padri.

		- --no-ff, ovvero fast-forward only, brutale copia e incolla del branch remoto nel locale.
			Funziona solo se in locale ho un sottoinsieme non aggiornato dei file in remoto,
			altrimenti si torna a risolvere i conflitti con i rebase/merge.

Ipotizziamo che A faccia i primi push sulla repo remota e B a un certo punto voglia pullarla per
la prima volta. Git si rifiuterà di farlo a meno di autorizzare esplicitamente questa cosa:

	git pull origin main --allow-unrelated-histories

In generale, il piano di azione è

	pull > modifiche > push


ALTRE COSE UTILI

- Vedere quali repo remoti sono associati alla repo locale

	git remote -v

- Rinominare origin:

	git remote rename origin nuovo_nome

- Cambiare l'URL di origin:

	git remote set-url origin nuovo_URL

- Visualizzare il contenuto della repo come albero (molto bello)

	tree

		-I seguita da una directory, non la espande (usabile iterativamente -I dir1 -I dir2 ...)
		--prune seguita da una directory, espande solo quella (usabile iterativamente)
		 

NOTE
"origin" è definito nella directory di lavoro. Posso avere più directory locali collegate alle
remote e tutte possono usare origin come alias per l'URL.
Ovviamente se voglio avere più riferimenti a repo remote sulla stessa locale devo cambiare nome.